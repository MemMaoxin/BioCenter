import pyqtgraph as pg
import array
import serial
import threading
import numpy as np
from queue import Queue
import time
from PyQt5 import QtWidgets
import sys
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import Qt
import inspect
import ctypes
import threading, queue
import socket
#  pyqtgraph PyQt5 pyserial

i = 0
control = 0
data_length = 5000
curve = []
data = []
data_bytes = bytearray()
pw = []
que = []
index_now = []
process = []
f = []
velocity = []
label = []
rate = []

devices_name = ["ECG", "PPG", "EEG", "Impedance"]
devices_name_label = []

hr_label = None

x_scale = [i1 * 10 / data_length for i1 in range(data_length)]

data_length_ppg = 1000
x_scale_ppg = [i1 * 10 / data_length_ppg for i1 in range(data_length_ppg)]

data_length_eeg = 2500
x_scale_eeg = [i1 * 10 / data_length_eeg for i1 in range(data_length_eeg)]

filter_parameter = [-0.000241862601478186, -0.00618333017151190, -0.00292015458774930, -0.00352860546326712,
                    -0.00381533991703169, -0.00390240672340895, -0.00377155150017023, -0.00344323716575758,
                    -0.00279819458188298, -0.00601017086427698, -3.23155675236391e-05, 0.000212473328685507,
                    0.000214100793306813, 0.000216402527767417, 0.000218739282812823, 0.000221743351354569,
                    0.000224804101431031, 0.000228482819103074, 0.000232195938703678, 0.000236564217288778,
                    0.000240943767462462, 0.000245970851519319, 0.000250998652576486, 0.000256657745943320,
                    0.000262331953388789, 0.000268593985116165, 0.000274871920464321, 0.000281780760067274,
                    0.000288670368598727, 0.000296166754004045, 0.000303612804371826, 0.000311621665358330,
                    0.000319681157459461, 0.000328270774612938, 0.000336820632867949, 0.000345946861787297,
                    0.000355001005403041, 0.000364616756871584, 0.000374146402646035, 0.000384209723779878,
                    0.000394269223207374, 0.000404791195744381, 0.000415224216487852, 0.000426184458410963,
                    0.000437027297644453, 0.000448379060034008, 0.000459765558908533, 0.000471333568861225,
                    0.000482911607282858, 0.000494986600433337, 0.000506906877652680, 0.000519305329636683,
                    0.000531529737419900, 0.000544200440201160, 0.000556806462295274, 0.000569559982355034,
                    0.000582328414402971, 0.000595530233654461, 0.000608485010925849, 0.000621823577937644,
                    0.000634900021395484, 0.000648342695208030, 0.000661555065762399, 0.000675117134004698,
                    0.000688403791089957, 0.000702043279205866, 0.000715381843108796, 0.000729054067871398,
                    0.000742407365294652, 0.000756063029655742, 0.000769407859054698, 0.000783014866177094,
                    0.000796269554108974, 0.000809811693810158, 0.000823010023445550, 0.000836534158739822,
                    0.000849804306071187, 0.000862880376581668, 0.000875875368957665, 0.000889015959093708,
                    0.000901726531231015, 0.000914637864425536, 0.000927098852298660, 0.000939745196939242,
                    0.000951980788164564, 0.000963985193933147, 0.000975902690662249, 0.000987863404503204,
                    0.000999301962470884, 0.00101085238151819, 0.00102187214629162, 0.00103295219110459,
                    0.00104356231803754, 0.00105420008369322, 0.00106426526370020, 0.00107438763009171,
                    0.00108391992383149, 0.00109349326064004, 0.00110246206252105, 0.00111142096023749,
                    0.00111981850897158, 0.00112814533048731, 0.00113582101515375, 0.00114348179432277,
                    0.00115048024202169, 0.00115744143033935, 0.00116371368951634, 0.00116987338019362,
                    0.00117535540074039, 0.00118073662429687, 0.00118538614602424, 0.00118993231236909,
                    0.00119372411711218, 0.00119738867541159, 0.00120027788790729, 0.00120297959160257,
                    0.00120492128143958, 0.00120665269011750, 0.00120751280477309, 0.00120804735319330,
                    0.00120726370147976, 0.00120395379003982, 0.00121034841823745, 0.00120782772642264,
                    0.00120616593551287, 0.00120439032045188, 0.00120167808111322, 0.00119854971248166,
                    0.00119423321954481, 0.00118768599169546, 0.00118849551267828, 0.00117826370380175,
                    0.00116964260821439, 0.00116155966230625, 0.00115288288038599, 0.00114412595970646,
                    0.00113455354716389, 0.00112473578487770, 0.00111404540735775, 0.00110309140380077,
                    0.00109119065810992, 0.00107899827062984, 0.00106583001694339, 0.00105234621155236,
                    0.00103788070284128, 0.00102305361433860, 0.00100725969895938, 0.000991109110440077,
                    0.000973924836167329, 0.000956366591383154, 0.000937760189315824, 0.000918783485189065,
                    0.000898855606782382, 0.000878439043818011, 0.000857013224487071, 0.000835192955475456,
                    0.000812311468299397, 0.000789039439625504, 0.000764706617741790, 0.000739983603268677,
                    0.000714263714007165, 0.000688023798852553, 0.000660774272953085, 0.000633122154475912,
                    0.000604403133739483, 0.000575285902687734, 0.000545145092325801, 0.000514393415934166,
                    0.000482782210449701, 0.000450732663425887, 0.000417602551447614, 0.000384065820239558,
                    0.000349452014218593, 0.000314433890628060, 0.000278384375382015, 0.000241768593738243,
                    0.000204319162481330, 0.000166397455591948, 0.000127376851742238, 8.79564657292383e-05,
                    4.74833967047798e-05, 6.63810489044910e-06, -3.52166166427070e-05, -7.74698170154019e-05,
                    -0.000120743059008500, -0.000164376766574787, -0.000209035711985310, -0.000254039877429829,
                    -0.000300054793305119, -0.000346403847545959, -0.000393727177543936, -0.000441399397317129,
                    -0.000490021884272656, -0.000538928487812777, -0.000588779271352387, -0.000638904442534124,
                    -0.000690024755427625, -0.000741945657849665, -0.000794112307623342, -0.000846866599757318,
                    -0.000900534968419690, -0.000954463724692410, -0.00100931322615235, -0.00106440502022170,
                    -0.00112039754519593, -0.00117694987402342, -0.00123361779035843, -0.00129089663487595,
                    -0.00134902199135877, -0.00140732470603168, -0.00146645968876734, -0.00152576382459960,
                    -0.00158582457829640, -0.00164609203427129, -0.00170713328715977, -0.00176828590882055,
                    -0.00183020496494691, -0.00189221414612019, -0.00195496969209245, -0.00201780745711805,
                    -0.00208132619171779, -0.00214496193493867, -0.00220926084010269, -0.00227356477602885,
                    -0.00233853465262199, -0.00240350034764503, -0.00246912013565605, -0.00253473466327651,
                    -0.00260090778059725, -0.00266704519661662, -0.00273375847047081, -0.00280037708395708,
                    -0.00286755470661116, -0.00293461192481079, -0.00300220006183793, -0.00306965378901851,
                    -0.00313755181866847, -0.00320531172702865, -0.00327353676801340, -0.00334155737096134,
                    -0.00341003083372801, -0.00347825541575772, -0.00354517789333208, -0.00361483468403496,
                    -0.00368359621189993, -0.00375210496384257, -0.00382099039889886, -0.00388955637275691,
                    -0.00395844647831516, -0.00402702914165579, -0.00409462022410647, -0.00416463933065297,
                    -0.00423293159934225, -0.00430063601640685, -0.00436857079613318, -0.00443606175889654,
                    -0.00450377465941109, -0.00457103682869956, -0.00463844273595584, -0.00470535128738135,
                    -0.00477240481916911, -0.00483890461156584, -0.00490551302352105, -0.00497152794905846,
                    -0.00503760853558132, -0.00510307856094369, -0.00516854654472621, -0.00523338380974212,
                    -0.00529822824769233, -0.00536237646399113, -0.00542647995954812, -0.00548982318221877,
                    -0.00555304050484515, -0.00561563454279720, -0.00567802247336105, -0.00573963134371295,
                    -0.00580109759609399, -0.00586172263644098, -0.00592217105107264, -0.00598174460932463,
                    -0.00604108962521099, -0.00609967222311659, -0.00615789541165676, -0.00621521866947604,
                    -0.00627227926006493, -0.00632838428419300, -0.00638419215480138, -0.00643910926114895,
                    -0.00649351184744534, -0.00654699867703690, -0.00660014208053248, -0.00665224343118316,
                    -0.00670396735022964, -0.00675461520852717, -0.00680484437331614, -0.00685404269786637,
                    -0.00690262927149849, -0.00695022497422569, -0.00699736039329645, -0.00704332168212629,
                    -0.00708877572881731, -0.00713303413937129, -0.00717676383550871, -0.00721932638367332,
                    -0.00726132796114796, -0.00730210977070104, -0.00734233295951351, -0.00738130425982293,
                    -0.00741969694326344, -0.00745682087666762, -0.00749334162154748, -0.00752861130129365,
                    -0.00756324036148363, -0.00759659350844617, -0.00762935601598877, -0.00766087578240639,
                    -0.00769190308490440, -0.00772195157877627, -0.00775006745468789, -0.00777780516092437,
                    -0.00780463308405751, -0.00783007468280841, -0.00785480295372079, -0.00787814093886709,
                    -0.00790077572794816, -0.00792219943021980, -0.00794181229522325, -0.00796123612781566,
                    -0.00797965000057413, -0.00799660917368424, -0.00801281024646620, -0.00802758736085755,
                    -0.00804158305078187, -0.00805421344617654, -0.00806604037878759, -0.00807643227509344,
                    -0.00808605731032896, -0.00809424211442448, -0.00810165810383242, 0.000427892656374111,
                    0.210148774362507, 0.0961841951232815, 0.118230551261127, 0.129042660734055, 0.132877361306260,
                    0.129042660734055, 0.118230551261127, 0.0961841951232815, 0.210148774362507, 0.000427892656374112,
                    -0.00810165810383242, -0.00809424211442448, -0.00808605731032896, -0.00807643227509344,
                    -0.00806604037878758, -0.00805421344617655, -0.00804158305078187, -0.00802758736085755,
                    -0.00801281024646620, -0.00799660917368424, -0.00797965000057413, -0.00796123612781566,
                    -0.00794181229522325, -0.00792219943021980, -0.00790077572794816, -0.00787814093886709,
                    -0.00785480295372079, -0.00783007468280841, -0.00780463308405751, -0.00777780516092437,
                    -0.00775006745468789, -0.00772195157877627, -0.00769190308490440, -0.00766087578240639,
                    -0.00762935601598877, -0.00759659350844617, -0.00756324036148363, -0.00752861130129365,
                    -0.00749334162154748, -0.00745682087666761, -0.00741969694326344, -0.00738130425982293,
                    -0.00734233295951351, -0.00730210977070104, -0.00726132796114797, -0.00721932638367332,
                    -0.00717676383550871, -0.00713303413937129, -0.00708877572881731, -0.00704332168212629,
                    -0.00699736039329645, -0.00695022497422569, -0.00690262927149849, -0.00685404269786638,
                    -0.00680484437331614, -0.00675461520852717, -0.00670396735022964, -0.00665224343118316,
                    -0.00660014208053248, -0.00654699867703690, -0.00649351184744534, -0.00643910926114895,
                    -0.00638419215480138, -0.00632838428419299, -0.00627227926006493, -0.00621521866947604,
                    -0.00615789541165676, -0.00609967222311659, -0.00604108962521099, -0.00598174460932463,
                    -0.00592217105107264, -0.00586172263644098, -0.00580109759609399, -0.00573963134371295,
                    -0.00567802247336105, -0.00561563454279720, -0.00555304050484515, -0.00548982318221877,
                    -0.00542647995954812, -0.00536237646399113, -0.00529822824769233, -0.00523338380974212,
                    -0.00516854654472621, -0.00510307856094369, -0.00503760853558132, -0.00497152794905846,
                    -0.00490551302352105, -0.00483890461156584, -0.00477240481916911, -0.00470535128738135,
                    -0.00463844273595584, -0.00457103682869956, -0.00450377465941109, -0.00443606175889654,
                    -0.00436857079613318, -0.00430063601640685, -0.00423293159934225, -0.00416463933065297,
                    -0.00409462022410647, -0.00402702914165579, -0.00395844647831516, -0.00388955637275691,
                    -0.00382099039889886, -0.00375210496384257, -0.00368359621189993, -0.00361483468403496,
                    -0.00354517789333208, -0.00347825541575772, -0.00341003083372801, -0.00334155737096134,
                    -0.00327353676801340, -0.00320531172702865, -0.00313755181866847, -0.00306965378901851,
                    -0.00300220006183793, -0.00293461192481079, -0.00286755470661116, -0.00280037708395708,
                    -0.00273375847047081, -0.00266704519661662, -0.00260090778059725, -0.00253473466327651,
                    -0.00246912013565605, -0.00240350034764503, -0.00233853465262199, -0.00227356477602885,
                    -0.00220926084010269, -0.00214496193493867, -0.00208132619171779, -0.00201780745711805,
                    -0.00195496969209245, -0.00189221414612019, -0.00183020496494691, -0.00176828590882055,
                    -0.00170713328715977, -0.00164609203427129, -0.00158582457829640, -0.00152576382459960,
                    -0.00146645968876734, -0.00140732470603168, -0.00134902199135877, -0.00129089663487595,
                    -0.00123361779035843, -0.00117694987402342, -0.00112039754519593, -0.00106440502022170,
                    -0.00100931322615235, -0.000954463724692410, -0.000900534968419690, -0.000846866599757318,
                    -0.000794112307623342, -0.000741945657849665, -0.000690024755427625, -0.000638904442534124,
                    -0.000588779271352386, -0.000538928487812777, -0.000490021884272656, -0.000441399397317130,
                    -0.000393727177543936, -0.000346403847545958, -0.000300054793305119, -0.000254039877429829,
                    -0.000209035711985310, -0.000164376766574787, -0.000120743059008500, -7.74698170154018e-05,
                    -3.52166166427070e-05, 6.63810489044910e-06, 4.74833967047798e-05, 8.79564657292383e-05,
                    0.000127376851742238, 0.000166397455591948, 0.000204319162481330, 0.000241768593738243,
                    0.000278384375382015, 0.000314433890628060, 0.000349452014218593, 0.000384065820239558,
                    0.000417602551447614, 0.000450732663425887, 0.000482782210449701, 0.000514393415934167,
                    0.000545145092325801, 0.000575285902687734, 0.000604403133739483, 0.000633122154475912,
                    0.000660774272953085, 0.000688023798852553, 0.000714263714007165, 0.000739983603268677,
                    0.000764706617741790, 0.000789039439625505, 0.000812311468299397, 0.000835192955475456,
                    0.000857013224487071, 0.000878439043818011, 0.000898855606782382, 0.000918783485189065,
                    0.000937760189315824, 0.000956366591383154, 0.000973924836167329, 0.000991109110440078,
                    0.00100725969895938, 0.00102305361433860, 0.00103788070284128, 0.00105234621155236,
                    0.00106583001694339, 0.00107899827062984, 0.00109119065810992, 0.00110309140380077,
                    0.00111404540735775, 0.00112473578487770, 0.00113455354716389, 0.00114412595970646,
                    0.00115288288038599, 0.00116155966230625, 0.00116964260821439, 0.00117826370380175,
                    0.00118849551267828, 0.00118768599169546, 0.00119423321954481, 0.00119854971248166,
                    0.00120167808111322, 0.00120439032045188, 0.00120616593551287, 0.00120782772642264,
                    0.00121034841823745, 0.00120395379003982, 0.00120726370147976, 0.00120804735319330,
                    0.00120751280477309, 0.00120665269011750, 0.00120492128143958, 0.00120297959160257,
                    0.00120027788790729, 0.00119738867541159, 0.00119372411711218, 0.00118993231236909,
                    0.00118538614602424, 0.00118073662429687, 0.00117535540074039, 0.00116987338019361,
                    0.00116371368951634, 0.00115744143033935, 0.00115048024202169, 0.00114348179432277,
                    0.00113582101515375, 0.00112814533048731, 0.00111981850897158, 0.00111142096023749,
                    0.00110246206252105, 0.00109349326064004, 0.00108391992383149, 0.00107438763009171,
                    0.00106426526370020, 0.00105420008369322, 0.00104356231803754, 0.00103295219110459,
                    0.00102187214629162, 0.00101085238151819, 0.000999301962470884, 0.000987863404503204,
                    0.000975902690662249, 0.000963985193933147, 0.000951980788164564, 0.000939745196939242,
                    0.000927098852298660, 0.000914637864425536, 0.000901726531231015, 0.000889015959093708,
                    0.000875875368957665, 0.000862880376581668, 0.000849804306071186, 0.000836534158739822,
                    0.000823010023445550, 0.000809811693810157, 0.000796269554108974, 0.000783014866177094,
                    0.000769407859054698, 0.000756063029655742, 0.000742407365294652, 0.000729054067871398,
                    0.000715381843108796, 0.000702043279205866, 0.000688403791089957, 0.000675117134004698,
                    0.000661555065762400, 0.000648342695208030, 0.000634900021395484, 0.000621823577937644,
                    0.000608485010925849, 0.000595530233654461, 0.000582328414402971, 0.000569559982355034,
                    0.000556806462295274, 0.000544200440201160, 0.000531529737419900, 0.000519305329636683,
                    0.000506906877652680, 0.000494986600433337, 0.000482911607282858, 0.000471333568861225,
                    0.000459765558908533, 0.000448379060034008, 0.000437027297644453, 0.000426184458410963,
                    0.000415224216487852, 0.000404791195744381, 0.000394269223207374, 0.000384209723779878,
                    0.000374146402646035, 0.000364616756871584, 0.000355001005403041, 0.000345946861787297,
                    0.000336820632867949, 0.000328270774612938, 0.000319681157459462, 0.000311621665358330,
                    0.000303612804371826, 0.000296166754004045, 0.000288670368598727, 0.000281780760067274,
                    0.000274871920464321, 0.000268593985116165, 0.000262331953388789, 0.000256657745943320,
                    0.000250998652576486, 0.000245970851519319, 0.000240943767462462, 0.000236564217288778,
                    0.000232195938703678, 0.000228482819103074, 0.000224804101431031, 0.000221743351354569,
                    0.000218739282812823, 0.000216402527767417, 0.000214100793306813, 0.000212473328685507,
                    -3.23155675236391e-05, -0.00601017086427698, -0.00279819458188298, -0.00344323716575758,
                    -0.00377155150017023, -0.00390240672340895, -0.00381533991703169, -0.00352860546326712,
                    -0.00292015458774930, -0.00618333017151190, -0.000241862601478186]
filter_parameter = np.array(filter_parameter)
ECG_buffer = np.zeros([4, 689])
ECG_buffer_control = np.zeros(4)

EEG_median_count = 5
EEG_median_buffer = np.zeros([4, EEG_median_count])
EEG_median_buffer_control = np.zeros(4)


def _async_raise(tid, exctype):
    """raises the exception, performs cleanup if needed"""
    tid = ctypes.c_long(tid)
    if not inspect.isclass(exctype):
        exctype = type(exctype)
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, ctypes.py_object(exctype))
    if res == 0:
        raise ValueError("invalid thread id")
    elif res != 1:
        # """if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect"""
        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, None)
        raise SystemError("PyThreadState_SetAsyncExc failed")


def stop_thread(thread):
    _async_raise(thread.ident, SystemExit)


def calcu_sub_str_num(mom_str, sun_str):
    count = 0  # 定义计数器初始值
    for i in range(len(mom_str) - 1):  # 因为i的下标从0开始，所以len（mom_str）-1
        if mom_str[i:i + len(sun_str)] == sun_str:
            count += 1
    return count




filter_PPG_parameter = [0.000149968997789926, 0.000235593846282378, 0.000318902555966049, 0.000395460136935415, 0.000460931354763838, 0.000511278847599686, 0.000543010524944291, 0.000553472832859132, 0.000541173420250007, 0.000506103673473081, 0.000450020614854368, 0.000376640807356924, 0.000291697830623651, 0.000202820640859757, 0.000119202949535663, 5.10530054836606e-05, 8.83729303291500e-06, 2.35832279185959e-06, 3.97329634448804e-05, 0.000126360422187659, 0.000263984866208448, 0.000449964056406108, 0.000676850289929562, 0.000932372551658545, 0.00119987946622963, 0.00145926318513752, 0.00168833778942985, 0.00186459626767084, 0.00196722250795092, 0.00197919417775526, 0.00188928378780319, 0.00169375282055088, 0.00139754047373109, 0.00101477558793359, 0.000568487029688154, 8.94514974078749e-05, -0.000385806209585646, -0.000817763213087777, -0.00116722067500257, -0.00139894803459024, -0.00148534445950597, -0.00140978126438942, -0.00116928632746332, -0.000776260165026033, -0.000258973306630636, 0.000339316986837444, 0.000962681619955633, 0.00154619189360617, 0.00202074562718039, 0.00231872209948102, 0.00238003826045403, 0.00215810608573526, 0.00162515708188441, 0.000776410776448126, -0.000367378055698764, -0.00175935529240319, -0.00332820525999518, -0.00498203604572480, -0.00661436768043091, -0.00811188644435630, -0.00936345105695718, -0.0102696898637474, -0.0107524269400704, -0.0107631309236923, -0.0102896008471603, -0.00936019072826636, -0.00804502614765705, -0.00645387290589857, -0.00473056640243371, -0.00304418268040557, -0.00157740725311931, -0.000512813634143234, -1.79781193705934e-05, -0.000230511241975108, -0.00124416381771342, -0.00309715640263490, -0.00576378155706934, -0.00915014186135281, -0.0130946235494376, -0.0173733828292964, -0.0217107617773895, -0.0257941793020641, -0.0292926881381829, -0.0318780789717328, -0.0332471729424240, -0.0331437947404666, -0.0313788747999912, -0.0278471975723026, -0.0225394920451290, -0.0155488405958874, -0.00707074505582677, 0.00260339006626816, 0.0130991474463089, 0.0239777039441335, 0.0347590889245138, 0.0449486851415151, 0.0540653135155436, 0.0616691058230449, 0.0673873560809035, 0.0709366546487304, 0.0721398418720041, 0.0709366546487304, 0.0673873560809035, 0.0616691058230449, 0.0540653135155436, 0.0449486851415151, 0.0347590889245138, 0.0239777039441335, 0.0130991474463089, 0.00260339006626816, -0.00707074505582677, -0.0155488405958874, -0.0225394920451290, -0.0278471975723026, -0.0313788747999912, -0.0331437947404666, -0.0332471729424240, -0.0318780789717328, -0.0292926881381829, -0.0257941793020641, -0.0217107617773895, -0.0173733828292964, -0.0130946235494376, -0.00915014186135281, -0.00576378155706934, -0.00309715640263490, -0.00124416381771342, -0.000230511241975108, -1.79781193705934e-05, -0.000512813634143234, -0.00157740725311931, -0.00304418268040557, -0.00473056640243371, -0.00645387290589857, -0.00804502614765705, -0.00936019072826636, -0.0102896008471603, -0.0107631309236923, -0.0107524269400704, -0.0102696898637474, -0.00936345105695718, -0.00811188644435630, -0.00661436768043091, -0.00498203604572480, -0.00332820525999518, -0.00175935529240319, -0.000367378055698764, 0.000776410776448126, 0.00162515708188441, 0.00215810608573526, 0.00238003826045403, 0.00231872209948102, 0.00202074562718039, 0.00154619189360617, 0.000962681619955633, 0.000339316986837444, -0.000258973306630636, -0.000776260165026033, -0.00116928632746332, -0.00140978126438942, -0.00148534445950597, -0.00139894803459024, -0.00116722067500257, -0.000817763213087777, -0.000385806209585646, 8.94514974078749e-05, 0.000568487029688154, 0.00101477558793359, 0.00139754047373109, 0.00169375282055088, 0.00188928378780319, 0.00197919417775526, 0.00196722250795092, 0.00186459626767084, 0.00168833778942985, 0.00145926318513752, 0.00119987946622963, 0.000932372551658545, 0.000676850289929562, 0.000449964056406108, 0.000263984866208448, 0.000126360422187659, 3.97329634448804e-05, 2.35832279185959e-06, 8.83729303291500e-06, 5.10530054836606e-05, 0.000119202949535663, 0.000202820640859757, 0.000291697830623651, 0.000376640807356924, 0.000450020614854368, 0.000506103673473081, 0.000541173420250007, 0.000553472832859132, 0.000543010524944291, 0.000511278847599686, 0.000460931354763838, 0.000395460136935415, 0.000318902555966049, 0.000235593846282378, 0.000149968997789926]
filter_PPG_parameter = np.array(filter_PPG_parameter)
PPG_buffer = np.zeros(200)
PPG_buffer_control = 0

data_queue = queue.Queue()
def readudp():
    BUFSIZE = 1024
    ip_port = ('0.0.0.0', 8765)
    server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # udp协议
    server.bind(ip_port)
    count = 0
    while True:
        data, client_addr = server.recvfrom(BUFSIZE)
        # print(f'receive({count}):', client_addr, data)
        data_queue.put(data)
        count+=1

def serial_xx():
    global data_bytes
    global f, control, pw
    global rate
    global devices_name_label
    global EEG_median_count, EEG_median_buffer, EEG_median_buffer_control, PPG_buffer, PPG_buffer_control
    while True:
        # count = mSerial.inWaiting()
        if True:
            # rec_str = mSerial.read(count)
            rec_str = data_queue.get()
            data_bytes = data_bytes + rec_str
            data_len = len(data_bytes)
            k = 0
            while k + 38 < data_len:  # 数据包为32个字节
                if data_bytes[k] == 0X41 and data_bytes[k + 22] == 0X0A and data_bytes[k + 1] == 0X30:
                    p = data_bytes[k + 1] - 0X30
                    t = time.time()
                    if control:
                        f.write('\r\n' + str(round(t * 1000)) + ' A' + str(p) + ' ')
                    for k2 in range(10):
                        data_put = data_bytes[k + 2 + 2 * k2] * 256 + data_bytes[k + 3 + 2 * k2]
                        if data_put > 5000:
                            data_put = 0
                        ECG_buffer_index = int(ECG_buffer_control[p] % 689)
                        ECG_buffer[p][ECG_buffer_index] = -data_put

                        filtered = 0.0
                        for j in range(689):
                            filtered = filtered + filter_parameter[j] * float(
                                ECG_buffer[p][int((ECG_buffer_index + 1 + j) % 689)])
                        ECG_buffer_control[p] += 1
                        # ECG_buffer[p][0:] = [*ECG_buffer[p][1:], data_put]
                        # filtered = np.dot(ECG_buffer[p], filter_parameter)
                        que[p].put(filtered)
                        if control:
                            f.write(str(data_put) + ' ')
                    rate[p] = rate[p] + 1
                    k = k + 22

                if data_bytes[k] == 0X41 and data_bytes[k + 9] == 0X0A and data_bytes[k + 1] == 0X31:
                    p = data_bytes[k + 1] - 0X30
                    t = time.time()
                    if control:
                        f.write('\r\n' + str(round(t * 1000)) + ' A' + str(p) + ' ')
                    data_put = (data_bytes[k + 2] & 0x3F) * 65535 + data_bytes[k + 3] * 256 + data_bytes[k + 4]
                    if data_put > 8388607:
                        data_put = data_put - 16777216

                    PPG_buffer_index = int(PPG_buffer_control % 200)
                    PPG_buffer[PPG_buffer_index] = data_put

                    filtered = 0.0
                    for j in range(200):
                        filtered = filtered + filter_PPG_parameter[j] * float(
                            PPG_buffer[int((PPG_buffer_index + 1 + j) % 200)])
                    PPG_buffer_control += 1
                    que[p].put(filtered)
                    if control:
                        f.write(str(data_put) + ' ')
                    rate[p] = rate[p] + 1
                    k = k + 9

                if data_bytes[k] == 0X41 and data_bytes[k + 38] == 0X0A and data_bytes[k + 1] == 0X32:
                    p = data_bytes[k + 1] - 0X30
                    t = time.time()
                    if control:
                        f.write('\r\n' + str(round(t * 1000)) + ' A' + str(p) + ' ')
                    for k2 in range(4):
                        #EEG1
                        data_put = data_bytes[k + 2 + 9 * k2] * 16777216 + data_bytes[k + 3 + 9 * k2] * 65536 + \
                                   data_bytes[k + 4 + 9 * k2] * 256 + data_bytes[k + 5 + 9 * k2]
                        if data_put > 2147483647:
                            data_put = data_put - 4294967296

                        # 中值滤波
                        EEG_median_buffer[p][int(int(EEG_median_buffer_control[p]) % EEG_median_count)] = data_put
                        filtered_median = np.median(EEG_median_buffer[p])
                        EEG_median_buffer_control[p] += 1

                        que[p].put(data_put)

                        #EEG2
                        data_put1 = data_bytes[k + 6 + 9 * k2] * 16777216 + data_bytes[k + 7 + 9 * k2] * 65536 + \
                                   data_bytes[k + 8 + 9 * k2] * 256 + data_bytes[k + 9 + 9 * k2]
                        if data_put1 > 2147483647:
                            data_put1 = data_put1 - 4294967296

                        # 中值滤波
                        EEG_median_buffer[p+1][int(int(EEG_median_buffer_control[p+1]) % EEG_median_count)] = data_put1
                        filtered_median = np.median(EEG_median_buffer[p+1])
                        EEG_median_buffer_control[p+1] += 1

                        que[p+1].put(data_put1)

                        if control:
                            f.write(str(data_put) + ' ' + str(data_put1) + ' ')
                    rate[p] = rate[p] + 1
                    rate[p + 1] = rate[p + 1] + 1
                    k = k + 38

                if data_bytes[k] == 0X41 and data_bytes[k + 22] == 0X0A and data_bytes[k + 1] == 0X33:
                    p = data_bytes[k + 1] - 0X30
                    t = time.time()
                    if control:
                        f.write('\r\n' + str(round(t * 1000)) + ' A' + str(p) + ' ')
                    for k2 in range(10):
                        data_put = data_bytes[k + 2 + 2 * k2] * 256 + data_bytes[k + 3 + 2 * k2]
                        if data_put > 5000:
                            data_put = 0
                        # elif data_put > 1500:  # 对应人体阻抗值为1790kΩ
                        #     turnoff_alert[p] = turnoff_alert[p] + 1
                        que[p + 1].put(data_put)
                        if control:
                            f.write(str(data_put) + ' ')
                    rate[p + 1] = rate[p + 1] + 1
                    k = k + 22

                else:
                    k = k + 1

            data_bytes[0:k] = b''


class MainWidget(QtWidgets.QMainWindow):
    def action_save(self):
        global f
        global control
        global rate, velocity, label

        if self.saveButton.text() == "SaveData":
            self.saveButton.setText("StopSaveData")
            fileName2, ok2 = QFileDialog.getSaveFileName(self,
                                                         "文件保存",
                                                         "./",
                                                         "Text Files (*.txt)")
            if not fileName2:
                fileName2 = "test1111.txt"
            f = open(fileName2, 'w')
            f.write('Data of  ')
            f.write('   '.join(devices_name) + '\r\n')
            f.write('Time————Channel————Data')
            control = 1
        elif self.saveButton.text() == "StopSaveData":
            self.saveButton.setText("SaveData")
            control = 0
            f.close()

    def action_cancel_save(self):
        global f
        global control
        if self.saveButton.text() == "StopSaveData":
            self.saveButton.setText("SaveData")
            control = 0
            f.close()

    @staticmethod
    def action_refresh():
        mSerial.write(("A" + "\r\n").encode())

    def __init__(self):
        super().__init__()
        global hr_label
        self.setWindowTitle("ECG_PPG_EEG_Impedance")  # 设置窗口标题
        main_widget = QtWidgets.QWidget()  # 实例化一个widget部件
        main_layout = QtWidgets.QGridLayout()  # 实例化一个网格布局层
        main_widget.setLayout(main_layout)  # 设置主widget部件的布局为网格布局
        main_widget.setStyleSheet('QWidget{background:white;}')  # 设置背景为白色

        for k in range(5):
            pw.insert(k, pg.PlotWidget(enableAutoRange=True))
            #pw.insert(k, pg.PlotWidget())
            pw[k].setLabel(axis='bottom', text='时间 / 秒')
            pw[k].setBackground("w")

            data.insert(k, array.array('i'))
            if k == 0:
                data[k] = np.zeros(data_length).__array__('d')
            elif k == 1:
                data[k] = np.zeros(data_length_ppg).__array__('d')
            elif k == 2 or k == 3:
                data[k] = np.zeros(data_length_eeg).__array__('d')
            else:
                data[k] = np.zeros(data_length).__array__('d')
            que.insert(k, Queue(maxsize=0))
            index_now.insert(k, 0)
            label.insert(k, QtWidgets.QLabel())
            label[k].setAlignment(Qt.AlignCenter)
            label[k].setText(' Efficiency:  0 % ')

            devices_name_label.insert(k, QtWidgets.QLabel())  # 设置EEG设备名称label
            devices_name_label[k].setAlignment(Qt.AlignCenter)
            devices_name_label[k].setStyleSheet("color: #000000; font-size:24px; font-weight:bold")

            rate.insert(k, 0)
            velocity.insert(k, 0)

        # 设置单个图标的纵坐标
        pw[0].setLabel(axis='left', text='心电幅值 / mV')
        pw[1].setLabel(axis='left', text='PPG幅值 / mV')
        pw[2].setLabel(axis='left', text='脑电幅值 / mv')
        pw[3].setLabel(axis='left', text='脑电幅值 / mv')
        pw[4].setLabel(axis='left', text='皮电幅值 / kΩ')
        devices_name_label[0].setText('ECG')
        devices_name_label[1].setText('PPG')
        devices_name_label[2].setText('EEG1')
        devices_name_label[3].setText('EEG2')
        devices_name_label[4].setText('Impedance')

        for k, p, d, color in zip(range(5), pw, data, ['#FF8C00', '#6495ED', '#FF6347', '#BA55D3', '#666666']):
            # 深橙色、矢车菊蓝、番茄色、板岩暗蓝灰色 https://www.sioe.cn/yingyong/yanse-rgb-16/
            # curve.insert(k, (p.plot(d, x=x_scale, pen=pg.mkPen(color=color))))
            if k == 0:
                curve.insert(k, (p.plot(d, x=x_scale, pen=pg.mkPen(color=color))))
            elif k == 1:
                curve.insert(k, (p.plot(d, x=x_scale_ppg, pen=pg.mkPen(color=color))))
            elif k == 2 or k == 3:
                curve.insert(k, (p.plot(d, x=x_scale_eeg, pen=pg.mkPen(color=color))))
            else:
                curve.insert(k, (p.plot(d, x=x_scale, pen=pg.mkPen(color=color))))
            # p.setRange(yRange=[-1, 1])
            main_layout.addWidget(devices_name_label[k], 1 + 3 * k, 1, 1, 5)
            main_layout.addWidget(pw[k], 2 + 3 * k, 1, 1, 5)  # 添加绘图部件到网格布局层
            main_layout.addWidget(label[k], 3 + 3 * k, 1, 1, 3)
        #hr label显示心率值
        hr_label = QtWidgets.QLabel()
        hr_label.setAlignment(Qt.AlignCenter)
        hr_label.setText(' 当前心率： 0 bpm')
        main_layout.addWidget(hr_label, 3, 4, 1, 2)  # 添加绘图部件到网格布局层
        # pw[0].setRange(yRange=[-5, 5])
        # pw[1].setRange(yRange=[-5, 5])
        # pw[2].setRange(yRange=[-5, 5])
        # pw[3].setRange(yRange=[-5, 5])

        # 保存按钮
        self.saveButton = QtWidgets.QPushButton(main_widget)
        self.saveButton.setText("SaveData")
        self.saveButton.setStyleSheet("QPushButton{color:#FFA500}"
                                      "QPushButton:hover{color:#DC143C}"
                                      "QPushButton{background-color:#000000}"
                                      "QPushButton{border:1px}"
                                      "QPushButton{border-radius:10px}"
                                      "QPushButton{padding:6px 6px}"
                                      "QPushButton{font:bold 20px}")
        self.saveButton.clicked.connect(self.action_save)
        main_layout.addWidget(self.saveButton, 16, 1, 1, 5)

        self.setCentralWidget(main_widget)  # 设置窗口默认部件为主widget

    def closeEvent(self, event):
        result = QtWidgets.QMessageBox.question(self, "Impedance", "Do you want to exit?",
                                                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
        if result == QtWidgets.QMessageBox.Yes:
            stop_thread(th1)
            print("Close successfully")
            event.accept()
        else:
            event.ignore()


R_detect_flag = 0
hrCaculationCount = 1600
hrCaculationArray = [0 for i in range(hrCaculationCount)]
R_interval = [0 for i in range(5)]
R_interval_index = 0
last_time_index = 0
hr = 0


def consumer_ecg():
    global R_detect_flag, hrCaculationCount, hrCaculationArray, R_interval, R_interval_index, last_time_index, hr, hr_label
    while True:
        if index_now[0] < data_length:
            v_body = que[0].get() * 36 / 4096
            data[0][index_now[0]] = v_body
            index_now[0] = index_now[0] + 1

        else:
            row_data = que[0].get()
            v_body = row_data * 36 / 4096
            data[0][:-1] = data[0][1:]
            data[0][index_now[0] - 1] = v_body
            if R_detect_flag < hrCaculationCount:
                hrCaculationArray[R_detect_flag] = row_data
                R_detect_flag += 1
            else:
                # 心率计算部分
                startR = [0 for i in range(hrCaculationCount)]
                endR = [0 for i in range(hrCaculationCount)]
                maxR = [0 for i in range(hrCaculationCount)]
                posR = [0 for i in range(hrCaculationCount)]
                interval = [0 for i in range(hrCaculationCount)]
                threshold = max(hrCaculationArray) * 0.75
                R_flag = 0
                k = 0
                for i1 in range(hrCaculationCount):
                    if hrCaculationArray[i1] > threshold and R_flag == 0:
                        startR[k] = i1
                        R_flag = 1
                    elif hrCaculationArray[i1] < threshold and R_flag == 1:
                        endR[k] = i1
                        R_flag = 0
                        maxR[k] = max(hrCaculationArray[int(startR[k]):int(endR[k])])
                        posR[k] = hrCaculationArray.index(maxR[k])
                        k += 1

                q = 0
                posPast = posR[0]
                if last_time_index != 0:
                    old_and_new = posR[0] + hrCaculationCount - last_time_index
                    if 200 < old_and_new < 600:
                        interval[q] = old_and_new
                        q += 1
                if k > 0:
                    last_time_index = posR[k - 1]
                if 2 <= k <= 8:
                    R_number = k
                    i1 = 0
                    while i1 < k - 1:
                        if posR[i1 + 1] - posPast < 200 or posR[i1 + 1] - posPast > 600:
                            posR[i1 + 1] = -1
                            R_number -= 1
                        else:
                            interval[q] = posR[i1 + 1] - posPast
                            posPast = posR[i1 + 1]
                            q += 1
                        i1 += 1
                    if 2 <= R_number < 7:
                        for p in range(q):
                            R_interval[R_interval_index] = interval[p]
                            R_interval_index = (R_interval_index + 1) % 5
                            R_interval_mean = np.mean(R_interval)
                            hr = 30720 / R_interval_mean
                            if R_interval[4] == 0 or hr < 50 or hr > 140:
                                hr = 0
                    else:
                        hr = 0
                else:
                    for p in range(5):
                        R_interval[p] = 0
                        hr = 0
                    R_interval_index = 0
                hr_label.setText(" 当前心率： %d bpm" % hr)
                print("hr: ", hr)

                R_detect_flag = 0


def consumer_eeg():
    while True:
        if index_now[2] < data_length_eeg:
            v_body = que[2].get() * 2.5 * 1000 / pow(2, 31) / 32
            data[2][index_now[2]] = v_body
            index_now[2] = index_now[2] + 1

        else:
            v_body = que[2].get() * 2.5 * 1000 / pow(2, 31) / 32
            data[2][:-1] = data[2][1:]
            data[2][index_now[2] - 1] = v_body

        if index_now[3] < data_length_eeg:
            v_body = que[3].get() * 2.5 * 1000 / pow(2, 31) / 32
            data[3][index_now[3]] = v_body
            index_now[3] = index_now[3] + 1

        else:
            v_body = que[3].get() * 2.5 * 1000 / pow(2, 31) / 32
            data[3][:-1] = data[3][1:]
            data[3][index_now[3] - 1] = v_body


def consumer_ppg():
    while True:
        if index_now[1] < data_length_ppg:
            v_body = que[1].get() * 5000 / 2097152
            data[1][index_now[1]] = v_body
            index_now[1] = index_now[1] + 1
        else:
            #PPG数据
            data[1][:-1] = data[1][1:]
            data[1][index_now[1] - 1] = que[1].get() * 5000 / 2097152


def consumer_impedance():
    while True:
        Ra = 50
        Rb = 86.6
        if index_now[4] < data_length:
            v_body = que[4].get()
            impedance_body = Rb * (11 * 1024 * Ra + 3 * (Rb + Ra) * v_body) / (
                    11 * 1024 * Rb - 3 * (Rb + Ra) * v_body)
            data[4][index_now[4]] = impedance_body
            index_now[4] = index_now[4] + 1
        else:
            #PPG数据
            data[4][:-1] = data[4][1:]
            v_body = que[4].get()
            impedance_body = Rb * (11 * 1024 * Ra + 3 * (Rb + Ra) * v_body) / (
                    11 * 1024 * Rb - 3 * (Rb + Ra) * v_body)
            data[4][index_now[4] - 1] = impedance_body

def plot_data():
    global x_scale, x_scale_ppg, x_scale_eeg
    curve[0].setData(x_scale, data[0])
    curve[1].setData(x_scale_ppg, data[1])
    curve[2].setData(x_scale_eeg, data[2])
    curve[3].setData(x_scale_eeg, data[3])
    curve[4].setData(x_scale, data[4])


def rate_refresh():
    global rate, velocity, label
    for k in range(5):
        velocity[k] = rate[k] - velocity[k]
        valid = velocity[k]
        if k == 1:
            valid = valid / 3
        elif k == 0:
            valid = valid * 2 / 3
        elif k == 2 or k == 3:
            valid = valid * 1.6 / 3
        elif k == 4:
            valid = valid * 2 / 3

        velocity[k] = rate[k]
        label[k].setText(' Efficiency:  %d %%' % valid)


if __name__ == "__main__":
    # 设置端口号及波特率
    port_xx = "COM4"
    bps = 115200
    # 串口执行到这已经打开 再用open命令会报错
    # mSerial = serial.Serial(port_xx, int(bps))
    # if mSerial.isOpen():
    #     print("Open successfully")
    #     mSerial.flushInput()  # 清空缓冲区

    # else:
    #     print("open failed")
    #     mSerial.close()  # 关闭端口
    app = QtWidgets.QApplication(sys.argv)
    gui = MainWidget()
    th1 = threading.Thread(target=serial_xx)
    th1.start()
    gui.show()
    timer = pg.QtCore.QTimer()
    timer.timeout.connect(plot_data)  # 定时刷新数据显示
    timer.start(30)  # 多少ms调用一次
    timer1 = pg.QtCore.QTimer()
    timer1.timeout.connect(rate_refresh)  # 定时刷新数据显示
    timer1.start(3000)  # 多少ms调用一次

    process.insert(0, threading.Thread(target=consumer_ecg))
    process.insert(1, threading.Thread(target=consumer_eeg))
    process.insert(2, threading.Thread(target=consumer_ppg))
    process.insert(3, threading.Thread(target=consumer_impedance))
    process.insert(4, threading.Thread(target=readudp))
    for k1 in range(5):
        process[k1].daemon = True
        process[k1].start()
    sys.exit(app.exec_())
